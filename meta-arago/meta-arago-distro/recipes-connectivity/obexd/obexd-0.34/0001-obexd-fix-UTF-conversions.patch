From 856e73619bc4ddf2d44e4b969d785c1afc0773a7 Mon Sep 17 00:00:00 2001
From: Moosa <moosab@ti.com>
Date: Tue, 13 Mar 2012 16:27:11 +0200
Subject: [PATCH] obexd: fix UTF conversions

* Implements the UTF16BE to UTF8 conversion

The glib library may not support conversion from UTF16BE to UTF8 (which
is needed to get the name of a file received in obexd), Specifically,
when glib is complied to use native iconv which does not support it
(and not use libiconv, GNU's iconv library, which does).

Upstream-Status: Inappropriate [Needed only since glib doesn't have UTF conversion support]

Signed-off-by: Moosa Baransi <moosab@ti.com>
---
 src/obex.c |   64 ++++++++++++++++++++++++++++++++++++++++++++++++++++++-----
 1 files changed, 58 insertions(+), 6 deletions(-)

diff --git a/src/obex.c b/src/obex.c
index ab7125c..b0f6106 100644
--- a/src/obex.c
+++ b/src/obex.c
@@ -179,6 +179,61 @@ static struct {
 	{ 0xFF,					NULL			},
 };
 
+#if __BYTE_ORDER == __LITTLE_ENDIAN
+	#define BETOH16(sh) ((sh>>8)|(sh<<8))
+#elif __BYTE_ORDER == __BIG_ENDIAN
+	#define BETOH16(sh) (sh)
+#else
+#error "Unknown byte order"
+#endif
+
+char *utf16be_to_utf8(const char *instr_ch, size_t inlen_ch)
+{
+	uint16_t *instr = (uint16_t*)instr_ch;
+	size_t inlen = inlen_ch / 2; 
+	uint16_t val,ext;
+	size_t in_i = 0, out_i = 0;
+	char *outstr = NULL;
+
+	if (inlen_ch % 2 != 0) {
+		error("%s(): odd number!",__func__);
+		return NULL;
+	}
+
+	outstr = g_malloc(inlen + 1);
+	if (outstr == NULL) {
+		error("%s(): g_malloc failed",__func__);
+		return NULL;
+	}	
+
+	while (in_i < inlen) {
+		val = BETOH16(instr[in_i]); 
+		in_i++;
+		if ((val & 0xf800) == 0xd800) {	
+			if (in_i < inlen) {
+				error("%s(): cut short",__func__);
+				g_free(outstr);
+				return NULL;
+			}
+			ext = BETOH16(instr[in_i]);
+			in_i++;
+			if ( ((val & 0xfc00) != 0xd800) || 
+			     ((ext & 0xfc00) != 0xdc00) ) {
+				error("%s(): illegal sequence",
+					__func__);
+				g_free(outstr);
+				return NULL;
+			}
+			val = ((val & 0x3ff) << 10) + 
+				(ext & 0x3ff) + 0x10000;
+		}
+		outstr[out_i] = val;
+		out_i++;
+	}
+	outstr[out_i++] = '\x00';
+	return outstr;
+}
+
 static void print_event(int evt, int cmd, int rsp)
 {
 	const char *evtstr = NULL, *cmdstr = NULL, *rspstr = NULL;
@@ -736,8 +791,7 @@ static void cmd_get(struct obex_session *os, obex_t *obex, obex_object_t *obj)
 			if (hlen == 0)
 				continue;
 
-			os->name = g_convert((const char *) hd.bs, hlen,
-					"UTF8", "UTF16BE", NULL, NULL, NULL);
+			os->name = utf16be_to_utf8((const char *) hd.bs, hlen);
 			DBG("OBEX_HDR_NAME: %s", os->name);
 			break;
 		case OBEX_HDR_TYPE:
@@ -857,8 +911,7 @@ static void cmd_setpath(struct obex_session *os,
 			break;
 		}
 
-		os->name = g_convert((const char *) hd.bs, hlen,
-				"UTF8", "UTF16BE", NULL, NULL, NULL);
+		os->name = utf16be_to_utf8((const char *) hd.bs, hlen);
 
 		DBG("Set path name: %s", os->name);
 		break;
@@ -954,8 +1007,7 @@ static gboolean check_put(obex_t *obex, obex_object_t *obj)
 			if (hlen == 0)
 				continue;
 
-			os->name = g_convert((const char *) hd.bs, hlen,
-					"UTF8", "UTF16BE", NULL, NULL, NULL);
+			os->name = utf16be_to_utf8((const char *) hd.bs, hlen);
 			DBG("OBEX_HDR_NAME: %s", os->name);
 			break;
 
-- 
1.7.1

