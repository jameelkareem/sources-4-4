From c182725c4b0af59d071f2d32bbe9885f065ed9f3 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Wed, 3 Feb 2016 17:47:09 -0500
Subject: [PATCH 21/23] net: netcp: ethss: move sysfs code to a separate file

For ease of maintenance and to reduce the size of ethss driver code
move the sysfs related code from netcp_ethss.c to a separate file,
netcp_ethss_sysfs.c. This requires that common definitions are moved
to a local header file netcp_ethss.h and included in both driver code.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
---
 drivers/net/ethernet/ti/Makefile            |   3 +-
 drivers/net/ethernet/ti/netcp_ethss.c       | 539 +---------------------------
 drivers/net/ethernet/ti/netcp_ethss.h       | 156 ++++++++
 drivers/net/ethernet/ti/netcp_ethss_sysfs.c | 444 +++++++++++++++++++++++
 4 files changed, 603 insertions(+), 539 deletions(-)
 create mode 100644 drivers/net/ethernet/ti/netcp_ethss.h
 create mode 100644 drivers/net/ethernet/ti/netcp_ethss_sysfs.c

diff --git a/drivers/net/ethernet/ti/Makefile b/drivers/net/ethernet/ti/Makefile
index 35bffd5..bbdf600 100644
--- a/drivers/net/ethernet/ti/Makefile
+++ b/drivers/net/ethernet/ti/Makefile
@@ -23,7 +23,8 @@ obj-$(CONFIG_TI_KEYSTONE_NETCP_CPTS) += netcp_cpts.o
 obj-$(CONFIG_TI_KEYSTONE_NETCP) += keystone_netcp.o
 keystone_netcp-y := netcp_core.o
 obj-$(CONFIG_TI_KEYSTONE_NETCP_ETHSS) += keystone_netcp_ethss.o
-keystone_netcp_ethss-y := netcp_ethss.o netcp_sgmii.o $(netcp_cpts-y)
+keystone_netcp_ethss-y := netcp_ethss.o netcp_ethss_sysfs.o netcp_sgmii.o \
+	$(netcp_cpts-y)
 obj-$(CONFIG_TI_KEYSTONE_NETCP_PA_CORE) += netcp_pa_core.o
 obj-$(CONFIG_TI_KEYSTONE_NETCP_PA) += keystone_netcp_pa.o
 keystone_netcp_pa-y := netcp_pa.o
diff --git a/drivers/net/ethernet/ti/netcp_ethss.c b/drivers/net/ethernet/ti/netcp_ethss.c
index 8d83a15..7c12544 100644
--- a/drivers/net/ethernet/ti/netcp_ethss.c
+++ b/drivers/net/ethernet/ti/netcp_ethss.c
@@ -30,9 +30,7 @@
 #include <linux/ethtool.h>
 #include <linux/phy/phy.h>
 
-#include "netcp_ale.h"
-#include "netcp.h"
-#include "netcp_cpts.h"
+#include "netcp_ethss.h"
 
 #define NETCP_DRIVER_NAME		"TI KeyStone Ethernet Driver"
 #define NETCP_DRIVER_VERSION		"v1.0"
@@ -189,10 +187,7 @@
 #define GBE_REG_OFS(p, rb, rn) ((p)->rb##_ofs.rn)
 
 #define HOST_TX_PRI_MAP_DEFAULT			0x00000000
-
-#define MAX_NUM_SERDES				2
 #define SGMII_MODULE_SIZE			0x100
-#define MAX_SLAVES				8
 
 #ifdef CONFIG_TI_KEYSTONE_NETCP_CPTS
 /* Px_TS_CTL register fields */
@@ -578,12 +573,6 @@ struct gbe_ss_regs {
 	u32	synce_mux;
 };
 
-struct gbe_ss_regs_ofs {
-	u16	id_ver;
-	u16	control;
-	u16	rgmii_status; /* 2U */
-};
-
 struct gbe_switch_regs {
 	u32	id_ver;
 	u32	control;
@@ -597,16 +586,6 @@ struct gbe_switch_regs {
 	u32	flow_control;
 };
 
-struct gbe_switch_regs_ofs {
-	u16	id_ver;
-	u16	control;
-	u16	soft_reset;
-	u16	emcontrol;
-	u16	stat_port_en;
-	u16	ptype;
-	u16	flow_control;
-};
-
 struct gbe_port_regs {
 	u32	max_blks;
 	u32	blk_cnt;
@@ -621,20 +600,6 @@ struct gbe_port_regs {
 	u32	ts_ctl2;
 };
 
-struct gbe_port_regs_ofs {
-	u16	port_vlan;
-	u16	tx_pri_map;
-	u16     rx_pri_map;
-	u16	sa_lo;
-	u16	sa_hi;
-	u16	ts_ctl;
-	u16	ts_seq_ltype;
-	u16	ts_vlan;
-	u16	ts_ctl_ltype2;
-	u16	ts_ctl2;
-	u16	rx_maxlen;	/* 2U, NU */
-};
-
 struct gbe_host_port_regs {
 	u32	src_id;
 	u32	port_vlan;
@@ -642,12 +607,6 @@ struct gbe_host_port_regs {
 	u32	rx_maxlen;
 };
 
-struct gbe_host_port_regs_ofs {
-	u16	port_vlan;
-	u16	tx_pri_map;
-	u16	rx_maxlen;
-};
-
 struct gbe_emac_regs {
 	u32	id_ver;
 	u32	mac_control;
@@ -662,12 +621,6 @@ struct gbe_emac_regs {
 	u32	rsvd[6];
 };
 
-struct gbe_emac_regs_ofs {
-	u16	mac_control;
-	u16	soft_reset;
-	u16	rx_maxlen;
-};
-
 struct gbe_hw_stats {
 	u32	rx_good_frames;
 	u32	rx_broadcast_frames;
@@ -706,16 +659,8 @@ struct gbe_hw_stats {
 	u32	rx_dma_overruns;
 };
 
-#define GBE_MAX_HW_STAT_MODS			9
 #define GBE_HW_STATS_REG_MAP_SZ			0x100
 
-struct ts_ctl {
-	int	uni;
-	u8	dst_port_map;
-	u8	maddr_map;
-	u8	ts_mcast_type;
-};
-
 struct gbe_slave {
 	void __iomem			*port_regs;
 	void __iomem			*emac_regs;
@@ -734,64 +679,6 @@ struct gbe_slave {
 	struct list_head		slave_list;
 };
 
-struct gbe_priv {
-	struct device			*dev;
-	struct netcp_device		*netcp_device;
-	struct timer_list		timer;
-	u32				num_slaves;
-	u32				ale_entries;
-	u32				ale_ports;
-	bool				enable_ale;
-	u8				max_num_slaves;
-	u8				max_num_ports; /* max_num_slaves + 1 */
-	u8				num_stats_mods;
-	u8				num_serdeses;
-	struct netcp_tx_pipe		tx_pipe;
-
-	int				host_port;
-	u32				rx_packet_max;
-	u32				ss_version;
-	u32				stats_en_mask;
-
-	struct regmap			*ss_regmap;
-	struct regmap			*pcsr_regmap;
-	void __iomem                    *ss_regs;
-	void __iomem			*switch_regs;
-	void __iomem			*host_port_regs;
-	void __iomem			*ale_reg;
-	void __iomem			*sgmii_port_regs;
-	void __iomem			*sgmii_port34_regs;
-	void __iomem			*hw_stats_regs[GBE_MAX_HW_STAT_MODS];
-
-	struct gbe_ss_regs_ofs		ss_regs_ofs;
-	struct gbe_switch_regs_ofs	switch_regs_ofs;
-	struct gbe_host_port_regs_ofs	host_port_regs_ofs;
-
-	struct cpsw_ale			*ale;
-	unsigned int			tx_queue_id;
-	const char			*dma_chan_name;
-
-	struct list_head		gbe_intf_head;
-	struct list_head		secondary_slaves;
-	struct net_device		*dummy_ndev;
-
-	u64				*hw_stats;
-	u32				*hw_stats_prev;
-	const struct netcp_ethtool_stat *et_stats;
-	int				num_et_stats;
-	/*  Lock for updating the hwstats */
-	spinlock_t			hw_stats_lock;
-	struct phy			*serdes_phy[MAX_NUM_SERDES];
-
-	struct kobject			port_ts_kobj[MAX_SLAVES];
-	u32				cpts_rftclk_sel;
-	u32				cpts_clock_mult;
-	u32				cpts_clock_shift;
-	u32				cpts_clock_div;
-	int                             cpts_registered;
-	struct cpts			cpts;
-};
-
 struct gbe_intf {
 	struct net_device	*ndev;
 	struct device		*dev;
@@ -1758,9 +1645,6 @@ static const struct netcp_ethtool_stat xgbe10_et_stats[] = {
 	XGBE_STATS2_INFO(rx_dma_overruns),
 };
 
-#define for_each_intf(i, priv) \
-	list_for_each_entry((i), &(priv)->gbe_intf_head, gbe_intf_list)
-
 #define for_each_sec_slave(slave, priv) \
 	list_for_each_entry((slave), &(priv)->secondary_slaves, slave_list)
 
@@ -3042,422 +2926,6 @@ static int gbe_of_parse_cpts(struct gbe_priv *gbe_dev,
 
 	return 0;
 }
-
-struct gbe_ts_attribute {
-	struct attribute attr;
-	ssize_t (*show)(struct gbe_priv *gbe_dev,
-			struct gbe_ts_attribute *attr, char *buf, void *);
-	ssize_t	(*store)(struct gbe_priv *gbe_dev,
-			 struct gbe_ts_attribute *attr,
-			 const char *, size_t, void *);
-};
-
-#define to_gbe_ts_attr(_attr) \
-	container_of(_attr, struct gbe_ts_attribute, attr)
-
-#define __GBE_TS_ATTR(_name, _mode, _show, _store)			\
-	{								\
-		.attr = {.name = __stringify(_name), .mode = _mode },	\
-		.show	= _show,					\
-		.store	= _store,					\
-	}
-
-#define pts_to_gbe_dev(obj) container_of(obj, struct gbe_priv, pts_kobj)
-
-#define pts_n_to_gbe_dev(obj, n) \
-	container_of(obj, struct gbe_priv, port_ts_kobj[n])
-
-struct gbe_slave *gbe_port_num_get_slave(struct gbe_priv *gbe_dev, int port)
-{
-	struct gbe_intf *gbe_intf;
-
-	for_each_intf(gbe_intf, gbe_dev) {
-		if (gbe_intf->slave->port_num == port)
-			return gbe_intf->slave;
-	}
-	return NULL;
-}
-
-static ssize_t gbe_port_ts_uni_show(struct gbe_priv *gbe_dev,
-				    struct gbe_ts_attribute *attr,
-				    char *buf, void *context)
-{
-	struct gbe_slave *slave;
-	int len, port;
-	u32 reg;
-
-	port = (int)context;
-
-	slave = gbe_port_num_get_slave(gbe_dev, port);
-	if (!slave)
-		return 0;
-
-	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-	len = snprintf(buf, PAGE_SIZE, "%lu\n",
-		       ((reg & TS_UNI_EN) >> TS_UNI_EN_SHIFT));
-
-	return len;
-}
-
-static ssize_t gbe_port_ts_uni_store(struct gbe_priv *gbe_dev,
-				     struct gbe_ts_attribute *attr,
-				     const char *buf, size_t count,
-				     void *context)
-{
-	struct gbe_slave *slave;
-	int port, val;
-	u32 reg, mode;
-
-	port = (int)context;
-
-	slave = gbe_port_num_get_slave(gbe_dev, port);
-	if (!slave)
-		return 0;
-
-	if (kstrtoint(buf, 0, &val) < 0)
-		return -EINVAL;
-
-	if (val)
-		mode = TS_UNI_EN;
-	else
-		mode = (slave->ts_ctl.maddr_map << TS_CTL_MADDR_SHIFT);
-
-	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-	reg &= ~(TS_UNI_EN | TS_CTL_MADDR_ALL);
-	reg |= mode;
-	writel(reg, GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-
-	slave->ts_ctl.uni = (val ? 1 : 0);
-	return count;
-}
-
-static struct gbe_ts_attribute gbe_pts_uni_attribute =
-				__GBE_TS_ATTR(uni_en, S_IRUGO | S_IWUSR,
-					      gbe_port_ts_uni_show,
-					      gbe_port_ts_uni_store);
-
-static ssize_t gbe_port_ts_maddr_show(struct gbe_priv *gbe_dev,
-				      struct gbe_ts_attribute *attr,
-				      char *buf, void *context)
-{
-	struct gbe_slave *slave;
-	int len, port;
-	u32 reg;
-
-	port = (int)context;
-
-	slave = gbe_port_num_get_slave(gbe_dev, port);
-	if (!slave)
-		return 0;
-
-	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-	len = snprintf(buf, PAGE_SIZE, "%02x\n",
-		       (reg >> TS_CTL_MADDR_SHIFT) & 0x1f);
-	return len;
-}
-
-static ssize_t gbe_port_ts_maddr_store(struct gbe_priv *gbe_dev,
-				       struct gbe_ts_attribute *attr,
-				       const char *buf, size_t count,
-				       void *context)
-{
-	struct gbe_slave *slave;
-	int port;
-	u32 reg;
-	u8 val;
-
-	port = (int)context;
-
-	slave = gbe_port_num_get_slave(gbe_dev, port);
-	if (!slave)
-		return 0;
-
-	if (kstrtou8(buf, 0, &val) < 0)
-		return -EINVAL;
-
-	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-	reg &= ~TS_CTL_MADDR_ALL;
-	reg |= ((val & 0x1f) << TS_CTL_MADDR_SHIFT);
-	writel(reg, GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-
-	slave->ts_ctl.maddr_map = val & 0x1f;
-	return count;
-}
-
-static struct gbe_ts_attribute gbe_pts_maddr_attribute =
-				__GBE_TS_ATTR(mcast_addr, S_IRUGO | S_IWUSR,
-					      gbe_port_ts_maddr_show,
-					      gbe_port_ts_maddr_store);
-
-static ssize_t gbe_port_ts_dst_port_show(struct gbe_priv *gbe_dev,
-					 struct gbe_ts_attribute *attr,
-					 char *buf, void *context)
-{
-	struct gbe_slave *slave;
-	int len, port;
-	u32 reg;
-
-	port = (int)context;
-
-	slave = gbe_port_num_get_slave(gbe_dev, port);
-	if (!slave)
-		return 0;
-
-	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-	len = snprintf(buf, PAGE_SIZE, "%01x\n",
-		       (reg >> TS_CTL_DST_PORT_SHIFT) & 0x3);
-	return len;
-}
-
-static ssize_t gbe_port_ts_dst_port_store(struct gbe_priv *gbe_dev,
-					  struct gbe_ts_attribute *attr,
-					  const char *buf, size_t count,
-					  void *context)
-{
-	struct gbe_slave *slave;
-	int port;
-	u32 reg;
-	u8 val;
-
-	port = (int)context;
-
-	slave = gbe_port_num_get_slave(gbe_dev, port);
-	if (!slave)
-		return 0;
-
-	if (kstrtou8(buf, 0, &val) < 0)
-		return -EINVAL;
-
-	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-	reg &= ~TS_CTL_DST_PORT;
-	reg |= ((val & 0x3) << TS_CTL_DST_PORT_SHIFT);
-	writel(reg, GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-
-	slave->ts_ctl.dst_port_map = val & 0x3;
-	return count;
-}
-
-static struct gbe_ts_attribute gbe_pts_dst_port_attribute =
-				__GBE_TS_ATTR(dst_port, S_IRUGO | S_IWUSR,
-					      gbe_port_ts_dst_port_show,
-					      gbe_port_ts_dst_port_store);
-
-static ssize_t gbe_port_ts_config_show(struct gbe_priv *gbe_dev,
-				       struct gbe_ts_attribute *attr,
-				       char *buf, void *context)
-{
-	struct gbe_slave *slave;
-	int len, port, total_len = 0;
-	u32 reg;
-	char *p = buf;
-
-	port = (int)context;
-
-	slave = gbe_port_num_get_slave(gbe_dev, port);
-	if (!slave)
-		return 0;
-
-	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-	len = snprintf(p, PAGE_SIZE, "%08x ", reg);
-	p += len;
-	total_len += len;
-
-	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-	len = snprintf(p, PAGE_SIZE, "%08x ", reg);
-	p += len;
-	total_len += len;
-
-	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-	len = snprintf(p, PAGE_SIZE, "%08x ", reg);
-	p += len;
-	total_len += len;
-
-	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-	len = snprintf(p, PAGE_SIZE, "%08x ", reg);
-	p += len;
-	total_len += len;
-
-	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
-	len = snprintf(p, PAGE_SIZE, "%08x\n", reg);
-	p += len;
-	total_len += len;
-
-	return total_len;
-}
-
-static ssize_t gbe_port_ts_config_store(struct gbe_priv *gbe_dev,
-					struct gbe_ts_attribute *attr,
-					const char *buf, size_t count,
-					void *context)
-{
-	struct gbe_slave *slave;
-	unsigned long reg, val;
-	int len, port;
-	char tmp_str[4];
-	u8 reg_num = 0;
-	u32 __iomem *p;
-
-	port = (int)context;
-
-	slave = gbe_port_num_get_slave(gbe_dev, port);
-	if (!slave)
-		return 0;
-
-	len = strcspn(buf, " ");
-	if (len > 1)
-		return -ENOMEM;
-
-	strncpy(tmp_str, buf, len);
-	tmp_str[len] = '\0';
-	if (kstrtou8(tmp_str, 0, &reg_num))
-		return -EINVAL;
-
-	buf += (len + 1);
-	if (kstrtoul(buf, 0, &val))
-		return -EINVAL;
-
-	switch (reg_num) {
-	case 1:
-		p = GBE_REG_ADDR(slave, port_regs, ts_ctl);
-		break;
-	case 2:
-		p = GBE_REG_ADDR(slave, port_regs, ts_seq_ltype);
-		break;
-	case 3:
-		p = GBE_REG_ADDR(slave, port_regs, ts_vlan);
-		break;
-	case 4:
-		p = GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2);
-		break;
-	case 5:
-		p = GBE_REG_ADDR(slave, port_regs, ts_ctl2);
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	reg = readl(p);
-	if (reg != val)
-		writel(val, p);
-
-	return count;
-}
-
-static struct gbe_ts_attribute gbe_pts_config_attribute =
-				__GBE_TS_ATTR(config, S_IRUGO | S_IWUSR,
-					      gbe_port_ts_config_show,
-					      gbe_port_ts_config_store);
-
-static struct attribute *gbe_pts_n_default_attrs[] = {
-	&gbe_pts_uni_attribute.attr,
-	&gbe_pts_maddr_attribute.attr,
-	&gbe_pts_dst_port_attribute.attr,
-	&gbe_pts_config_attribute.attr,
-	NULL
-};
-
-struct gbe_priv *gbe_port_ts_kobj_to_priv(struct kobject *kobj, int *port)
-{
-	char name[4];
-	struct gbe_priv *gbe_dev;
-	struct kobject *kobj_0;
-	int i = 0;
-
-	*port = -1;
-
-	while (i < MAX_SLAVES) {
-		snprintf(name, sizeof(name), "%d", i + 1);
-		if (strncmp(name, kobject_name(kobj), strlen(name)) == 0)
-			*port = i + 1;
-		i++;
-	}
-
-	if (*port < 0)
-		return NULL;
-
-	kobj_0 = kobj - (*port - 1);
-	gbe_dev = pts_n_to_gbe_dev(kobj_0, 0);
-	return gbe_dev;
-}
-
-static ssize_t gbe_pts_n_attr_show(struct kobject *kobj,
-				   struct attribute *attr, char *buf)
-{
-	struct gbe_ts_attribute *attribute = to_gbe_ts_attr(attr);
-	struct gbe_priv *gbe_dev;
-	int port = -1;
-
-	if (!attribute->show)
-		return -EIO;
-
-	gbe_dev = gbe_port_ts_kobj_to_priv(kobj, &port);
-	if (!gbe_dev)
-		return -EIO;
-
-	return attribute->show(gbe_dev, attribute, buf, (void *)port);
-}
-
-static ssize_t gbe_pts_n_attr_store(struct kobject *kobj,
-				    struct attribute *attr,
-				    const char *buf, size_t count)
-{
-	struct gbe_ts_attribute *attribute = to_gbe_ts_attr(attr);
-	struct gbe_priv *gbe_dev;
-	int port = -1;
-
-	if (!attribute->store)
-		return -EIO;
-
-	gbe_dev = gbe_port_ts_kobj_to_priv(kobj, &port);
-	if (!gbe_dev)
-		return -EIO;
-
-	return attribute->store(gbe_dev, attribute, buf, count, (void *)port);
-}
-
-static const struct sysfs_ops gbe_pts_n_sysfs_ops = {
-	.show = gbe_pts_n_attr_show,
-	.store = gbe_pts_n_attr_store,
-};
-
-static struct kobj_type gbe_pts_n_ktype = {
-	.sysfs_ops = &gbe_pts_n_sysfs_ops,
-	.default_attrs = gbe_pts_n_default_attrs,
-};
-
-static int gbe_create_cpts_sysfs(struct gbe_priv *gbe_dev)
-{
-	struct kobject *pts_kobj;
-	char name[4];
-	int i, ret;
-
-	pts_kobj = kobject_create_and_add("port_ts",
-					  kobject_get(&gbe_dev->dev->kobj));
-	if (!pts_kobj) {
-		dev_err(gbe_dev->dev,
-			"failed to create sysfs port_ts entry\n");
-		kobject_put(&gbe_dev->dev->kobj);
-		return -ENOMEM;
-	}
-
-	for (i = 0; i < gbe_dev->num_slaves; i++) {
-		snprintf(name, sizeof(name), "%d", i + 1);
-		ret = kobject_init_and_add(&gbe_dev->port_ts_kobj[i],
-					   &gbe_pts_n_ktype,
-					   kobject_get(pts_kobj), name);
-
-		if (ret) {
-			dev_err(gbe_dev->dev,
-				"failed to create sysfs port_ts/%s entry\n",
-				name);
-			kobject_put(&gbe_dev->port_ts_kobj[i]);
-			kobject_put(pts_kobj);
-			return ret;
-		}
-	}
-
-	return 0;
-}
 #else
 static void init_slave_ts_ctl(struct gbe_slave *slave)
 {
@@ -3468,11 +2936,6 @@ static int gbe_of_parse_cpts(struct gbe_priv *gbe_dev,
 {
 	return 0;
 }
-
-static int gbe_create_cpts_sysfs(struct gbe_priv *gbe_dev)
-{
-	return 0;
-}
 #endif /* CONFIG_TI_KEYSTONE_NETCP_CPTS */
 
 static int init_slave(struct gbe_priv *gbe_dev, struct gbe_slave *slave,
diff --git a/drivers/net/ethernet/ti/netcp_ethss.h b/drivers/net/ethernet/ti/netcp_ethss.h
new file mode 100644
index 0000000..85133c3
--- /dev/null
+++ b/drivers/net/ethernet/ti/netcp_ethss.h
@@ -0,0 +1,156 @@
+/*
+ * NetCP ethss header file
+ *
+ * Copyright (C) 2014 - 2016 Texas Instruments Incorporated
+ * Authors:	Sandeep Nair <sandeep_n@ti.com>
+ *		Sandeep Paulraj <s-paulraj@ti.com>
+ *		Cyril Chemparathy <cyril@ti.com>
+ *		Santosh Shilimkar <santosh.shilimkar@ti.com>
+ *		Wingman Kwok <w-kwok2@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __NETCP_ETHSS_H__
+#define __NETCP_ETHSS_H__
+
+#include <linux/device.h>
+#include <linux/netdevice.h>
+#include <linux/io.h>
+#include <linux/kobject.h>
+#include <linux/list.h>
+#include <linux/phy/phy.h>
+#include <linux/spinlock.h>
+#include <linux/regmap.h>
+#include <linux/timer.h>
+#include <linux/ethtool.h>
+
+#include "netcp_ale.h"
+#include "netcp.h"
+#include "netcp_cpts.h"
+
+#define MAX_NUM_SERDES				2
+#define MAX_SLAVES				8
+
+struct gbe_ss_regs_ofs {
+	u16	id_ver;
+	u16	control;
+	u16	rgmii_status; /* 2U */
+};
+
+struct gbe_switch_regs_ofs {
+	u16	id_ver;
+	u16	control;
+	u16	soft_reset;
+	u16	emcontrol;
+	u16	stat_port_en;
+	u16	ptype;
+	u16	flow_control;
+};
+
+struct gbe_port_regs_ofs {
+	u16	port_vlan;
+	u16	tx_pri_map;
+	u16	rx_pri_map;
+	u16	sa_lo;
+	u16	sa_hi;
+	u16	ts_ctl;
+	u16	ts_seq_ltype;
+	u16	ts_vlan;
+	u16	ts_ctl_ltype2;
+	u16	ts_ctl2;
+	u16	rx_maxlen;	/* 2U, NU */
+};
+
+struct gbe_host_port_regs_ofs {
+	u16	port_vlan;
+	u16	tx_pri_map;
+	u16	rx_maxlen;
+};
+
+struct gbe_emac_regs_ofs {
+	u16	mac_control;
+	u16	soft_reset;
+	u16	rx_maxlen;
+};
+
+#define GBE_MAX_HW_STAT_MODS			9
+
+struct ts_ctl {
+	int	uni;
+	u8	dst_port_map;
+	u8	maddr_map;
+	u8	ts_mcast_type;
+};
+
+struct gbe_priv {
+	struct device			*dev;
+	struct netcp_device		*netcp_device;
+	struct timer_list		timer;
+	u32				num_slaves;
+	u32				ale_entries;
+	u32				ale_ports;
+	bool				enable_ale;
+	u8				max_num_slaves;
+	u8				max_num_ports; /* max_num_slaves + 1 */
+	u8				num_stats_mods;
+	u8				num_serdeses;
+	struct netcp_tx_pipe		tx_pipe;
+
+	int				host_port;
+	u32				rx_packet_max;
+	u32				ss_version;
+	u32				stats_en_mask;
+
+	struct regmap			*ss_regmap;
+	struct regmap			*pcsr_regmap;
+	void __iomem                    *ss_regs;
+	void __iomem			*switch_regs;
+	void __iomem			*host_port_regs;
+	void __iomem			*ale_reg;
+	void __iomem			*sgmii_port_regs;
+	void __iomem			*sgmii_port34_regs;
+	void __iomem			*hw_stats_regs[GBE_MAX_HW_STAT_MODS];
+
+	struct gbe_ss_regs_ofs		ss_regs_ofs;
+	struct gbe_switch_regs_ofs	switch_regs_ofs;
+	struct gbe_host_port_regs_ofs	host_port_regs_ofs;
+
+	struct cpsw_ale			*ale;
+	unsigned int			tx_queue_id;
+	const char			*dma_chan_name;
+
+	struct list_head		gbe_intf_head;
+	struct list_head		secondary_slaves;
+	struct net_device		*dummy_ndev;
+
+	u64				*hw_stats;
+	u32				*hw_stats_prev;
+	const struct netcp_ethtool_stat *et_stats;
+	int				num_et_stats;
+	/*  Lock for updating the hwstats */
+	spinlock_t			hw_stats_lock;
+	struct phy			*serdes_phy[MAX_NUM_SERDES];
+
+	struct kobject			port_ts_kobj[MAX_SLAVES];
+	u32				cpts_rftclk_sel;
+	u32				cpts_clock_mult;
+	u32				cpts_clock_shift;
+	u32				cpts_clock_div;
+	int                             cpts_registered;
+	struct cpts			cpts;
+};
+
+int gbe_create_cpts_sysfs(struct gbe_priv *gbe_dev);
+
+#define for_each_intf(i, priv) \
+	list_for_each_entry((i), &(priv)->gbe_intf_head, gbe_intf_list)
+
+#endif /* __NETCP_ETHSS_H */
diff --git a/drivers/net/ethernet/ti/netcp_ethss_sysfs.c b/drivers/net/ethernet/ti/netcp_ethss_sysfs.c
new file mode 100644
index 0000000..f3e70d7
--- /dev/null
+++ b/drivers/net/ethernet/ti/netcp_ethss_sysfs.c
@@ -0,0 +1,444 @@
+/*
+ * Keystone GBE and XGBE sysfs driver code
+ *
+ * Copyright (C) 2014 - 2016 Texas Instruments Incorporated
+ * Authors:	Sandeep Nair <sandeep_n@ti.com>
+ *		Sandeep Paulraj <s-paulraj@ti.com>
+ *		Cyril Chemparathy <cyril@ti.com>
+ *		Santosh Shilimkar <santosh.shilimkar@ti.com>
+ *		Wingman Kwok <w-kwok2@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include "netcp_ethss.h"
+
+#ifdef CONFIG_TI_KEYSTONE_NETCP_CPTS
+struct gbe_ts_attribute {
+	struct attribute attr;
+	ssize_t (*show)(struct gbe_priv *gbe_dev,
+			struct gbe_ts_attribute *attr, char *buf, void *);
+	ssize_t	(*store)(struct gbe_priv *gbe_dev,
+			 struct gbe_ts_attribute *attr,
+			 const char *, size_t, void *);
+};
+
+#define to_gbe_ts_attr(_attr) \
+	container_of(_attr, struct gbe_ts_attribute, attr)
+
+#define __GBE_TS_ATTR(_name, _mode, _show, _store)			\
+	{								\
+		.attr = {.name = __stringify(_name), .mode = _mode },	\
+		.show	= _show,					\
+		.store	= _store,					\
+	}
+
+#define pts_to_gbe_dev(obj) container_of(obj, struct gbe_priv, pts_kobj)
+
+#define pts_n_to_gbe_dev(obj, n) \
+	container_of(obj, struct gbe_priv, port_ts_kobj[n])
+
+struct gbe_slave *gbe_port_num_get_slave(struct gbe_priv *gbe_dev, int port)
+{
+	struct gbe_intf *gbe_intf;
+
+	for_each_intf(gbe_intf, gbe_dev) {
+		if (gbe_intf->slave->port_num == port)
+			return gbe_intf->slave;
+	}
+	return NULL;
+}
+
+static ssize_t gbe_port_ts_uni_show(struct gbe_priv *gbe_dev,
+				    struct gbe_ts_attribute *attr,
+				    char *buf, void *context)
+{
+	struct gbe_slave *slave;
+	int len, port;
+	u32 reg;
+
+	port = (int)context;
+
+	slave = gbe_port_num_get_slave(gbe_dev, port);
+	if (!slave)
+		return 0;
+
+	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+	len = snprintf(buf, PAGE_SIZE, "%lu\n",
+		       ((reg & TS_UNI_EN) >> TS_UNI_EN_SHIFT));
+
+	return len;
+}
+
+static ssize_t gbe_port_ts_uni_store(struct gbe_priv *gbe_dev,
+				     struct gbe_ts_attribute *attr,
+				     const char *buf, size_t count,
+				     void *context)
+{
+	struct gbe_slave *slave;
+	int port, val;
+	u32 reg, mode;
+
+	port = (int)context;
+
+	slave = gbe_port_num_get_slave(gbe_dev, port);
+	if (!slave)
+		return 0;
+
+	if (kstrtoint(buf, 0, &val) < 0)
+		return -EINVAL;
+
+	if (val)
+		mode = TS_UNI_EN;
+	else
+		mode = (slave->ts_ctl.maddr_map << TS_CTL_MADDR_SHIFT);
+
+	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+	reg &= ~(TS_UNI_EN | TS_CTL_MADDR_ALL);
+	reg |= mode;
+	writel(reg, GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+
+	slave->ts_ctl.uni = (val ? 1 : 0);
+	return count;
+}
+
+static struct gbe_ts_attribute gbe_pts_uni_attribute =
+				__GBE_TS_ATTR(uni_en, S_IRUGO | S_IWUSR,
+					      gbe_port_ts_uni_show,
+					      gbe_port_ts_uni_store);
+
+static ssize_t gbe_port_ts_maddr_show(struct gbe_priv *gbe_dev,
+				      struct gbe_ts_attribute *attr,
+				      char *buf, void *context)
+{
+	struct gbe_slave *slave;
+	int len, port;
+	u32 reg;
+
+	port = (int)context;
+
+	slave = gbe_port_num_get_slave(gbe_dev, port);
+	if (!slave)
+		return 0;
+
+	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+	len = snprintf(buf, PAGE_SIZE, "%02x\n",
+		       (reg >> TS_CTL_MADDR_SHIFT) & 0x1f);
+	return len;
+}
+
+static ssize_t gbe_port_ts_maddr_store(struct gbe_priv *gbe_dev,
+				       struct gbe_ts_attribute *attr,
+				       const char *buf, size_t count,
+				       void *context)
+{
+	struct gbe_slave *slave;
+	int port;
+	u32 reg;
+	u8 val;
+
+	port = (int)context;
+
+	slave = gbe_port_num_get_slave(gbe_dev, port);
+	if (!slave)
+		return 0;
+
+	if (kstrtou8(buf, 0, &val) < 0)
+		return -EINVAL;
+
+	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+	reg &= ~TS_CTL_MADDR_ALL;
+	reg |= ((val & 0x1f) << TS_CTL_MADDR_SHIFT);
+	writel(reg, GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+
+	slave->ts_ctl.maddr_map = val & 0x1f;
+	return count;
+}
+
+static struct gbe_ts_attribute gbe_pts_maddr_attribute =
+				__GBE_TS_ATTR(mcast_addr, S_IRUGO | S_IWUSR,
+					      gbe_port_ts_maddr_show,
+					      gbe_port_ts_maddr_store);
+
+static ssize_t gbe_port_ts_dst_port_show(struct gbe_priv *gbe_dev,
+					 struct gbe_ts_attribute *attr,
+					 char *buf, void *context)
+{
+	struct gbe_slave *slave;
+	int len, port;
+	u32 reg;
+
+	port = (int)context;
+
+	slave = gbe_port_num_get_slave(gbe_dev, port);
+	if (!slave)
+		return 0;
+
+	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+	len = snprintf(buf, PAGE_SIZE, "%01x\n",
+		       (reg >> TS_CTL_DST_PORT_SHIFT) & 0x3);
+	return len;
+}
+
+static ssize_t gbe_port_ts_dst_port_store(struct gbe_priv *gbe_dev,
+					  struct gbe_ts_attribute *attr,
+					  const char *buf, size_t count,
+					  void *context)
+{
+	struct gbe_slave *slave;
+	int port;
+	u32 reg;
+	u8 val;
+
+	port = (int)context;
+
+	slave = gbe_port_num_get_slave(gbe_dev, port);
+	if (!slave)
+		return 0;
+
+	if (kstrtou8(buf, 0, &val) < 0)
+		return -EINVAL;
+
+	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+	reg &= ~TS_CTL_DST_PORT;
+	reg |= ((val & 0x3) << TS_CTL_DST_PORT_SHIFT);
+	writel(reg, GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+
+	slave->ts_ctl.dst_port_map = val & 0x3;
+	return count;
+}
+
+static struct gbe_ts_attribute gbe_pts_dst_port_attribute =
+				__GBE_TS_ATTR(dst_port, S_IRUGO | S_IWUSR,
+					      gbe_port_ts_dst_port_show,
+					      gbe_port_ts_dst_port_store);
+
+static ssize_t gbe_port_ts_config_show(struct gbe_priv *gbe_dev,
+				       struct gbe_ts_attribute *attr,
+				       char *buf, void *context)
+{
+	struct gbe_slave *slave;
+	int len, port, total_len = 0;
+	u32 reg;
+	char *p = buf;
+
+	port = (int)context;
+
+	slave = gbe_port_num_get_slave(gbe_dev, port);
+	if (!slave)
+		return 0;
+
+	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+	len = snprintf(p, PAGE_SIZE, "%08x ", reg);
+	p += len;
+	total_len += len;
+
+	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+	len = snprintf(p, PAGE_SIZE, "%08x ", reg);
+	p += len;
+	total_len += len;
+
+	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+	len = snprintf(p, PAGE_SIZE, "%08x ", reg);
+	p += len;
+	total_len += len;
+
+	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+	len = snprintf(p, PAGE_SIZE, "%08x ", reg);
+	p += len;
+	total_len += len;
+
+	reg = readl(GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2));
+	len = snprintf(p, PAGE_SIZE, "%08x\n", reg);
+	p += len;
+	total_len += len;
+
+	return total_len;
+}
+
+static ssize_t gbe_port_ts_config_store(struct gbe_priv *gbe_dev,
+					struct gbe_ts_attribute *attr,
+					const char *buf, size_t count,
+					void *context)
+{
+	struct gbe_slave *slave;
+	unsigned long reg, val;
+	int len, port;
+	char tmp_str[4];
+	u8 reg_num = 0;
+	u32 __iomem *p;
+
+	port = (int)context;
+
+	slave = gbe_port_num_get_slave(gbe_dev, port);
+	if (!slave)
+		return 0;
+
+	len = strcspn(buf, " ");
+	if (len > 1)
+		return -ENOMEM;
+
+	strncpy(tmp_str, buf, len);
+	tmp_str[len] = '\0';
+	if (kstrtou8(tmp_str, 0, &reg_num))
+		return -EINVAL;
+
+	buf += (len + 1);
+	if (kstrtoul(buf, 0, &val))
+		return -EINVAL;
+
+	switch (reg_num) {
+	case 1:
+		p = GBE_REG_ADDR(slave, port_regs, ts_ctl);
+		break;
+	case 2:
+		p = GBE_REG_ADDR(slave, port_regs, ts_seq_ltype);
+		break;
+	case 3:
+		p = GBE_REG_ADDR(slave, port_regs, ts_vlan);
+		break;
+	case 4:
+		p = GBE_REG_ADDR(slave, port_regs, ts_ctl_ltype2);
+		break;
+	case 5:
+		p = GBE_REG_ADDR(slave, port_regs, ts_ctl2);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	reg = readl(p);
+	if (reg != val)
+		writel(val, p);
+
+	return count;
+}
+
+static struct gbe_ts_attribute gbe_pts_config_attribute =
+				__GBE_TS_ATTR(config, S_IRUGO | S_IWUSR,
+					      gbe_port_ts_config_show,
+					      gbe_port_ts_config_store);
+
+static struct attribute *gbe_pts_n_default_attrs[] = {
+	&gbe_pts_uni_attribute.attr,
+	&gbe_pts_maddr_attribute.attr,
+	&gbe_pts_dst_port_attribute.attr,
+	&gbe_pts_config_attribute.attr,
+	NULL
+};
+
+struct gbe_priv *gbe_port_ts_kobj_to_priv(struct kobject *kobj, int *port)
+{
+	char name[4];
+	struct gbe_priv *gbe_dev;
+	struct kobject *kobj_0;
+	int i = 0;
+
+	*port = -1;
+
+	while (i < MAX_SLAVES) {
+		snprintf(name, sizeof(name), "%d", i + 1);
+		if (strncmp(name, kobject_name(kobj), strlen(name)) == 0)
+			*port = i + 1;
+		i++;
+	}
+
+	if (*port < 0)
+		return NULL;
+
+	kobj_0 = kobj - (*port - 1);
+	gbe_dev = pts_n_to_gbe_dev(kobj_0, 0);
+	return gbe_dev;
+}
+
+static ssize_t gbe_pts_n_attr_show(struct kobject *kobj,
+				   struct attribute *attr, char *buf)
+{
+	struct gbe_ts_attribute *attribute = to_gbe_ts_attr(attr);
+	struct gbe_priv *gbe_dev;
+	int port = -1;
+
+	if (!attribute->show)
+		return -EIO;
+
+	gbe_dev = gbe_port_ts_kobj_to_priv(kobj, &port);
+	if (!gbe_dev)
+		return -EIO;
+
+	return attribute->show(gbe_dev, attribute, buf, (void *)port);
+}
+
+static ssize_t gbe_pts_n_attr_store(struct kobject *kobj,
+				    struct attribute *attr,
+				    const char *buf, size_t count)
+{
+	struct gbe_ts_attribute *attribute = to_gbe_ts_attr(attr);
+	struct gbe_priv *gbe_dev;
+	int port = -1;
+
+	if (!attribute->store)
+		return -EIO;
+
+	gbe_dev = gbe_port_ts_kobj_to_priv(kobj, &port);
+	if (!gbe_dev)
+		return -EIO;
+
+	return attribute->store(gbe_dev, attribute, buf, count, (void *)port);
+}
+
+static const struct sysfs_ops gbe_pts_n_sysfs_ops = {
+	.show = gbe_pts_n_attr_show,
+	.store = gbe_pts_n_attr_store,
+};
+
+static struct kobj_type gbe_pts_n_ktype = {
+	.sysfs_ops = &gbe_pts_n_sysfs_ops,
+	.default_attrs = gbe_pts_n_default_attrs,
+};
+
+int gbe_create_cpts_sysfs(struct gbe_priv *gbe_dev)
+{
+	struct kobject *pts_kobj;
+	char name[4];
+	int i, ret;
+
+	pts_kobj = kobject_create_and_add("port_ts",
+					  kobject_get(&gbe_dev->dev->kobj));
+	if (!pts_kobj) {
+		dev_err(gbe_dev->dev,
+			"failed to create sysfs port_ts entry\n");
+		kobject_put(&gbe_dev->dev->kobj);
+		return -ENOMEM;
+	}
+
+	for (i = 0; i < gbe_dev->num_slaves; i++) {
+		snprintf(name, sizeof(name), "%d", i + 1);
+		ret = kobject_init_and_add(&gbe_dev->port_ts_kobj[i],
+					   &gbe_pts_n_ktype,
+					   kobject_get(pts_kobj), name);
+
+		if (ret) {
+			dev_err(gbe_dev->dev,
+				"failed to create sysfs port_ts/%s entry\n",
+				name);
+			kobject_put(&gbe_dev->port_ts_kobj[i]);
+			kobject_put(pts_kobj);
+			return ret;
+		}
+	}
+
+	return 0;
+}
+#else
+int gbe_create_cpts_sysfs(struct gbe_priv *gbe_dev)
+{
+	return 0;
+}
+#endif /* CONFIG_TI_KEYSTONE_NETCP_CPTS */
-- 
1.9.1

