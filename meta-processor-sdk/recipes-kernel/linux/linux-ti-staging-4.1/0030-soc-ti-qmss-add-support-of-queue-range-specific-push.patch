From 8c72cb871188ca4838e682f42b62a00c6111568b Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Mon, 7 Mar 2016 04:20:45 -0500
Subject: [PATCH 30/38] soc: ti: qmss: add support of queue range specific push
 pop methods

When a range of hardware queues are monitored and
packets in those queues are proessed by a PDSP
firmware, the PDSP firmware may have a queue push
and pop methods different from the generic push
pop methods provided by the qmss module.  This patch
adds the support of such flexibility.  One application
of this is in the support of NETCP QoS.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
---
 drivers/soc/ti/knav_qmss.h       |  3 +++
 drivers/soc/ti/knav_qmss_queue.c | 22 ++++++++++++++++++++++
 2 files changed, 25 insertions(+)

diff --git a/drivers/soc/ti/knav_qmss.h b/drivers/soc/ti/knav_qmss.h
index 60e3f3c..50b753f 100644
--- a/drivers/soc/ti/knav_qmss.h
+++ b/drivers/soc/ti/knav_qmss.h
@@ -327,6 +327,9 @@ struct knav_range_ops {
 			       struct knav_queue_inst *inst);
 	int	(*set_notify)(struct knav_range_info *range,
 			      struct knav_queue_inst *inst, bool enabled);
+	int	(*queue_push)(struct knav_queue_inst *inst, dma_addr_t dma,
+			      unsigned size, unsigned flags);
+	dma_addr_t (*queue_pop)(struct knav_queue_inst *inst, unsigned *size);
 };
 
 struct knav_irq_info {
diff --git a/drivers/soc/ti/knav_qmss_queue.c b/drivers/soc/ti/knav_qmss_queue.c
index 2767b2f..d0423bd 100644
--- a/drivers/soc/ti/knav_qmss_queue.c
+++ b/drivers/soc/ti/knav_qmss_queue.c
@@ -633,7 +633,18 @@ int knav_queue_push(void *qhandle, dma_addr_t dma,
 					unsigned size, unsigned flags)
 {
 	struct knav_queue *qh = qhandle;
+	struct knav_range_info *range = qh->inst->range;
 	u32 val;
+	int ret;
+
+	if (range->ops && range->ops->queue_push) {
+		ret = range->ops->queue_push(qh->inst, dma, size, flags);
+		if (!ret)
+			atomic_inc(&qh->stats.pushes);
+		else
+			atomic_inc(&qh->stats.push_errors);
+		return ret;
+	}
 
 	val = (u32)dma | ((size / 16) - 1);
 	writel_relaxed(val, &qh->reg_push[0].ptr_size_thresh);
@@ -654,8 +665,19 @@ dma_addr_t knav_queue_pop(void *qhandle, unsigned *size)
 {
 	struct knav_queue *qh = qhandle;
 	struct knav_queue_inst *inst = qh->inst;
+	struct knav_range_info *range = inst->range;
 	dma_addr_t dma;
 	u32 val, idx;
+	int ret;
+
+	if (range->ops && range->ops->queue_pop) {
+		ret = range->ops->queue_pop(qh->inst, size);
+		if (!ret)
+			atomic_inc(&qh->stats.pops);
+		else
+			atomic_inc(&qh->stats.pop_errors);
+		return ret;
+	}
 
 	/* are we accumulated? */
 	if (inst->descs) {
-- 
1.9.1

