From 2cb5f7d8aed2dc16a6c4ec5dd49d270facc2e80a Mon Sep 17 00:00:00 2001
From: Vitaly Andrianov <vitalya@ti.com>
Date: Tue, 31 May 2016 14:50:39 -0400
Subject: [PATCH 46/47] crypto: keystone: add driver statistics

This patch exposes packets statistics through sysfs interface

Signed-off-by: Vitaly Andrianov <vitalya@ti.com>
---
 drivers/crypto/keystone-sa-hlp.h   |  16 ++++
 drivers/crypto/keystone-sa-utils.c |   4 +
 drivers/crypto/keystone-sa.c       | 169 +++++++++++++++++++++++++++++++++++++
 3 files changed, 189 insertions(+)

diff --git a/drivers/crypto/keystone-sa-hlp.h b/drivers/crypto/keystone-sa-hlp.h
index 8c9d9b9..a877acc 100644
--- a/drivers/crypto/keystone-sa-hlp.h
+++ b/drivers/crypto/keystone-sa-hlp.h
@@ -76,6 +76,18 @@ struct sa_regs {
 	struct sa_mmr_regs mmr;
 };
 
+/* Driver statistics */
+struct sa_drv_stats {
+	/* Number of data pkts dropped while submitting to CP_ACE */
+	atomic_t tx_dropped;
+	/* Number of tear-down pkts dropped while submitting to CP_ACE */
+	atomic_t sc_tear_dropped;
+	/* Number of crypto requests sent to CP_ACE */
+	atomic_t tx_pkts;
+	/* Number of crypto request completions received from CP_ACE */
+	atomic_t rx_pkts;
+};
+
 /* Crypto driver instance data */
 struct keystone_crypto_data {
 	struct platform_device	*pdev;
@@ -109,6 +121,7 @@ struct keystone_crypto_data {
 
 	spinlock_t	scid_lock; /* lock for SC-ID allocation */
 
+	struct kobject	stats_kobj;
 	int		stats_fl;
 
 	/* Security context data */
@@ -119,6 +132,9 @@ struct keystone_crypto_data {
 	/* Bitmap to keep track of Security context ID's */
 	unsigned long	ctx_bm[DIV_ROUND_UP(SA_MAX_NUM_CTX,
 				BITS_PER_LONG)];
+
+	/* Driver stats */
+	struct sa_drv_stats	stats;
 	atomic_t	rx_dma_page_cnt; /* N buf from 2nd pool available */
 	atomic_t	tx_dma_desc_cnt; /* Tx DMA desc-s available */
 };
diff --git a/drivers/crypto/keystone-sa-utils.c b/drivers/crypto/keystone-sa-utils.c
index 6224a70..ae5c0e6 100644
--- a/drivers/crypto/keystone-sa-utils.c
+++ b/drivers/crypto/keystone-sa-utils.c
@@ -681,6 +681,7 @@ static int sa_tear_sc(struct sa_ctx_info *ctx,
 	return 0;
 
 err:
+	atomic_inc(&pdata->stats.sc_tear_dropped);
 	if (dma_ctx)
 		kmem_cache_free(pdata->dma_req_ctx_cache, dma_ctx);
 	return ret;
@@ -995,6 +996,7 @@ void sa_tx_completion_process(struct keystone_crypto_data *dev_data)
 			if (likely(ctx->pkt)) {
 				atomic_add(ctx->src_nents,
 					   &ctx->dev_data->tx_dma_desc_cnt);
+				atomic_inc(&ctx->dev_data->stats.tx_pkts);
 			}
 		}
 
@@ -1082,6 +1084,8 @@ aead_err:
 			kfree((void *)hwdesc[j]->pad[0]);
 		}
 	}
+
+	atomic_inc(&dev_data->stats.rx_pkts);
 }
 
 void sa_rx_completion_process(struct keystone_crypto_data *dev_data)
diff --git a/drivers/crypto/keystone-sa.c b/drivers/crypto/keystone-sa.c
index aec9143..3eedf79 100644
--- a/drivers/crypto/keystone-sa.c
+++ b/drivers/crypto/keystone-sa.c
@@ -38,6 +38,15 @@
 #include "keystone-sa.h"
 #include "keystone-sa-hlp.h"
 
+#define SA_ATTR(_name, _mode, _show, _store) \
+	struct sa_kobj_attribute sa_attr_##_name = \
+__ATTR(_name, _mode, _show, _store)
+
+#define to_sa_kobj_attr(_attr) \
+	container_of(_attr, struct sa_kobj_attribute, attr)
+#define to_crypto_data_from_stats_obj(obj) \
+	container_of(obj, struct keystone_crypto_data, stats_kobj)
+
 #define OF_PROP_READ(type, node, prop, var) \
 	do { \
 		ret = of_property_read_##type(node, prop, &var); \
@@ -478,6 +487,153 @@ fail:
 	return error;
 }
 
+/*	SYSFS interface functions    */
+struct sa_kobj_attribute {
+	struct attribute attr;
+	ssize_t (*show)(struct keystone_crypto_data *crypto,
+			struct sa_kobj_attribute *attr, char *buf);
+	ssize_t	(*store)(struct keystone_crypto_data *crypto,
+			 struct sa_kobj_attribute *attr, const char *, size_t);
+};
+
+static
+ssize_t sa_stats_show_tx_pkts(struct keystone_crypto_data *crypto,
+			      struct sa_kobj_attribute *attr, char *buf)
+{
+	return scnprintf(buf, PAGE_SIZE, "%d\n",
+			atomic_read(&crypto->stats.tx_pkts));
+}
+
+static
+ssize_t sa_stats_reset_tx_pkts(struct keystone_crypto_data *crypto,
+			       struct sa_kobj_attribute *attr,
+			       const char *buf, size_t len)
+{
+	atomic_set(&crypto->stats.tx_pkts, 0);
+	return len;
+}
+
+static
+ssize_t sa_stats_show_rx_pkts(struct keystone_crypto_data *crypto,
+			      struct sa_kobj_attribute *attr, char *buf)
+{
+	return scnprintf(buf, PAGE_SIZE, "%d\n",
+			 atomic_read(&crypto->stats.rx_pkts));
+}
+
+static ssize_t sa_stats_reset_rx_pkts(struct keystone_crypto_data *crypto,
+				      struct sa_kobj_attribute *attr,
+				      const char *buf, size_t len)
+{
+	atomic_set(&crypto->stats.rx_pkts, 0);
+	return len;
+}
+
+static
+ssize_t sa_stats_show_tx_drop_pkts(struct keystone_crypto_data *crypto,
+				   struct sa_kobj_attribute *attr, char *buf)
+{
+	return scnprintf(buf, PAGE_SIZE, "%d\n",
+			atomic_read(&crypto->stats.tx_dropped));
+}
+
+static
+ssize_t sa_stats_reset_tx_drop_pkts(struct keystone_crypto_data *crypto,
+				    struct sa_kobj_attribute *attr,
+				    const char *buf, size_t len)
+{
+	atomic_set(&crypto->stats.tx_dropped, 0);
+	return len;
+}
+
+static ssize_t
+sa_stats_show_sc_tear_drop_pkts(struct keystone_crypto_data *crypto,
+				struct sa_kobj_attribute *attr, char *buf)
+{
+	return scnprintf(buf, PAGE_SIZE, "%d\n",
+			atomic_read(&crypto->stats.sc_tear_dropped));
+}
+
+static SA_ATTR(tx_pkts, S_IRUGO | S_IWUSR,
+	       sa_stats_show_tx_pkts, sa_stats_reset_tx_pkts);
+static SA_ATTR(rx_pkts, S_IRUGO | S_IWUSR,
+	       sa_stats_show_rx_pkts, sa_stats_reset_rx_pkts);
+static SA_ATTR(tx_drop_pkts, S_IRUGO | S_IWUSR,
+	       sa_stats_show_tx_drop_pkts, sa_stats_reset_tx_drop_pkts);
+static SA_ATTR(sc_tear_drop_pkts, S_IRUGO,
+	       sa_stats_show_sc_tear_drop_pkts, NULL);
+
+static struct attribute *sa_stats_attrs[] = {
+	&sa_attr_tx_pkts.attr,
+	&sa_attr_rx_pkts.attr,
+	&sa_attr_tx_drop_pkts.attr,
+	&sa_attr_sc_tear_drop_pkts.attr,
+	NULL
+};
+
+static ssize_t sa_kobj_attr_show(struct kobject *kobj, struct attribute *attr,
+				 char *buf)
+{
+	struct sa_kobj_attribute *sa_attr = to_sa_kobj_attr(attr);
+	struct keystone_crypto_data *crypto =
+		to_crypto_data_from_stats_obj(kobj);
+	ssize_t ret = -EIO;
+
+	if (sa_attr->show)
+		ret = sa_attr->show(crypto, sa_attr, buf);
+	return ret;
+}
+
+static
+ssize_t sa_kobj_attr_store(struct kobject *kobj, struct attribute *attr,
+			   const char *buf, size_t len)
+{
+	struct sa_kobj_attribute *sa_attr = to_sa_kobj_attr(attr);
+	struct keystone_crypto_data *crypto =
+		to_crypto_data_from_stats_obj(kobj);
+	ssize_t ret = -EIO;
+
+	if (sa_attr->store)
+		ret = sa_attr->store(crypto, sa_attr, buf, len);
+	return ret;
+}
+
+static const struct sysfs_ops sa_stats_sysfs_ops = {
+	.show = sa_kobj_attr_show,
+	.store = sa_kobj_attr_store,
+};
+
+static struct kobj_type sa_stats_ktype = {
+	.sysfs_ops = &sa_stats_sysfs_ops,
+	.default_attrs = sa_stats_attrs,
+};
+
+static int sa_create_sysfs_entries(struct keystone_crypto_data *crypto)
+{
+	struct device *dev = &crypto->pdev->dev;
+	int ret;
+
+	ret = kobject_init_and_add(&crypto->stats_kobj, &sa_stats_ktype,
+				   kobject_get(&dev->kobj), "stats");
+
+	if (ret) {
+		dev_err(dev, "failed to create sysfs entry\n");
+		kobject_put(&crypto->stats_kobj);
+		kobject_put(&dev->kobj);
+	}
+
+	if (!ret)
+		crypto->stats_fl = 1;
+
+	return ret;
+}
+
+static void sa_delete_sysfs_entries(struct keystone_crypto_data *crypto)
+{
+	if (crypto->stats_fl)
+		kobject_del(&crypto->stats_kobj);
+}
+
 static int sa_read_dtb(struct device_node *node,
 		       struct keystone_crypto_data *dev_data)
 {
@@ -569,6 +725,8 @@ static int keystone_crypto_remove(struct platform_device *pdev)
 	/* un-register crypto algorithms */
 	sa_unregister_algos(&pdev->dev);
 
+	/* Delete SYSFS entries */
+	sa_delete_sysfs_entries(dev_data);
 	/* Release DMA resources */
 	sa_free_resources(dev_data);
 	/* Kill tasklets */
@@ -653,6 +811,12 @@ static int keystone_crypto_probe(struct platform_device *pdev)
 
 	tasklet_init(&dev_data->tx_task, sa_tx_task, (unsigned long)dev_data);
 
+	/* Initialize statistic counters */
+	atomic_set(&dev_data->stats.tx_dropped, 0);
+	atomic_set(&dev_data->stats.sc_tear_dropped, 0);
+	atomic_set(&dev_data->stats.tx_pkts, 0);
+	atomic_set(&dev_data->stats.rx_pkts, 0);
+
 	/* Initialize memory pools used by the driver */
 	if (ret = sa_init_mem(dev_data)) {
 		dev_err(dev, "Failed to create dma pool");
@@ -668,6 +832,11 @@ static int keystone_crypto_probe(struct platform_device *pdev)
 	/* Initialize the SC-ID allocation lock */
 	spin_lock_init(&dev_data->scid_lock);
 
+	/* Create sysfs entries */
+	ret = sa_create_sysfs_entries(dev_data);
+	if (ret)
+		goto err;
+
 	/* Register crypto algorithms */
 	sa_register_algos(dev);
 
-- 
1.9.1

