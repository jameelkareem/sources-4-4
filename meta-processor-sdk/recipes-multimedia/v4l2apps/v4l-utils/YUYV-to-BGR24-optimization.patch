--- a/lib/libv4lconvert/rgbyuv.c
+++ b/lib/libv4lconvert/rgbyuv.c
@@ -200,31 +200,55 @@
	}
 }

+#define SAT(c) if (c & (~255)) { if (c < 0) c = 0; else c = 255; }
 void v4lconvert_yuyv_to_bgr24(const unsigned char *src, unsigned char *dest,
		int width, int height, int stride)
 {
-	int j;
+   unsigned char *s;
+   unsigned char *d;
+   int l, c;
+   int r, g, b, cr, cg, cb, y1, y2;
+   int stride_slack;
+   unsigned char loc_scratch[1920*2];
+   unsigned char *loc_src = (unsigned char *)src;
+   int line_byte_width = width * 2;

-	while (--height >= 0) {
-		for (j = 0; j + 1 < width; j += 2) {
-			int u = src[1];
-			int v = src[3];
-			int u1 = (((u - 128) << 7) +  (u - 128)) >> 6;
-			int rg = (((u - 128) << 1) +  (u - 128) +
-					((v - 128) << 2) + ((v - 128) << 1)) >> 3;
-			int v1 = (((v - 128) << 1) +  (v - 128)) >> 1;
+   l = height;
+   d = dest;
+   while (l--) {
+      c = width >> 1;
+      memcpy (loc_scratch, loc_src, line_byte_width);
+      loc_src += stride;
+      s = loc_scratch;
+      while (c--) {
+         y1 = *s++;
+         cb = ((*s - 128) * 454) >> 8;
+         cg = (*s++ - 128) * 88;
+         y2 = *s++;
+         cr = ((*s - 128) * 359) >> 8;
+         cg = (cg + (*s++ - 128) * 183) >> 8;

-			*dest++ = CLIP(src[0] + u1);
-			*dest++ = CLIP(src[0] - rg);
-			*dest++ = CLIP(src[0] + v1);
+         r = y1 + cr;
+         b = y1 + cb;
+         g = y1 - cg;
+         SAT(r);
+         SAT(g);
+         SAT(b);
+         *d++ = b;
+         *d++ = g;
+         *d++ = r;
+         r = y2 + cr;
+         b = y2 + cb;
+         g = y2 - cg;
+         SAT(r);
+         SAT(g);
+         SAT(b);

-			*dest++ = CLIP(src[2] + u1);
-			*dest++ = CLIP(src[2] - rg);
-			*dest++ = CLIP(src[2] + v1);
-			src += 4;
-		}
-		src += stride - width * 2;
-	}
+         *d++ = b;
+         *d++ = g;
+         *d++ = r;
+      }
+   }
 }

 void v4lconvert_yuyv_to_rgb24(const unsigned char *src, unsigned char *dest,
